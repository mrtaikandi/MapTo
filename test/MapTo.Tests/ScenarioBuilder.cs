using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Text;

namespace MapTo.Tests;

internal static class ScenarioBuilder
{
    internal const string TestDataRelativeFolder = "TestData";

    internal static readonly string GeneratedCodeAttribute =
        $"""[global::System.CodeDom.Compiler.GeneratedCodeAttribute("MapTo", "{FileVersionInfo.GetVersionInfo(typeof(MapToGenerator).Assembly.Location).FileVersion}")]""";

    private const string AllowNull = "global::System.Diagnostics.CodeAnalysis.AllowNull";
    private const string ExpectedFileName = "ExpectedGeneratedFile";
    private const string NotNullIfNotNull = "global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull";

    public static string GetExpectedFileContent(this ITestSourceBuilder builder) =>
        builder.GetGeneratedFile().Source;

    public static TestSource GetGeneratedFile(this ITestSourceBuilder builder) =>
        builder.Sources.GetSource(ExpectedFileName);

    public static ITestSourceBuilder SimpleMappedClassInDifferentNamespaceAsSource(TestSourceBuilderOptions? options = null)
    {
        options ??= TestSourceBuilderOptions.Create();
        options.AddAnalyzerConfigOption(nameof(CodeGeneratorOptions.ProjectionType), ProjectionType.None.ToString());

        var builder = new TestSourceBuilder(options);

        var sourceFile1 = builder.AddFile(ns: "ExternalLib", usings: new[] { "MapTo" });
        sourceFile1.AddClass(Accessibility.Public, "SourceClass").WithProperty<int>("Id").WithProperty<string>("Name");

        var sourceFile2 = builder.AddFile(ns: "ExternalLibMap", usings: new[] { "MapTo", "ExternalLib" });
        sourceFile2.AddClass(Accessibility.Public, "TargetClass", attributes: "[MapFrom(typeof(SourceClass))]")
            .WithProperty<int>("Id")
            .WithProperty<string>("Name");

        return builder;
    }

    public static ITestSourceBuilder SimpleMappedRecordInSameNamespace(TestSourceBuilderOptions? options = null, ProjectionType mapFromProjectionType = ProjectionType.None)
    {
        var builder = new TestSourceBuilder(options ?? TestSourceBuilderOptions.Create(supportNullReferenceTypes: true));
        builder.AddFile(supportNullableReferenceTypes: true).WithBody(
            $"""
             public record SourceRecord(int Value);

             [MapFrom(typeof(SourceRecord), ProjectTo = ProjectionType.{mapFromProjectionType})]
             public record DestinationRecord(int Value);
             """);

        return builder;
    }

    public static ITestSourceBuilder SimpleMappedRecordWithProjectionMethod([StringSyntax("csharp")] string method, bool supportNullReferenceTypes = false)
    {
        var builder = new TestSourceBuilder(TestSourceBuilderOptions.Create(supportNullReferenceTypes: supportNullReferenceTypes));
        builder.AddFile(
                supportNullableReferenceTypes: supportNullReferenceTypes,
                usings: new[] { "System", "System.Collections.Generic", "System.Collections.Immutable", "System.Collections.ObjectModel" })
            .WithBody(
                $$"""
                  public record SourceRecord(int Value);

                  [MapFrom(typeof(SourceRecord), ProjectTo = ProjectionType.None)]
                  public partial record DestinationRecord(int Value)
                  {
                      {{method}}
                  }
                  """);

        return builder;
    }

    public static ITestSourceBuilder SimpleMappedClassInSameNamespaceAsSource(TestSourceBuilderOptions? options = null)
    {
        options ??= TestSourceBuilderOptions.Create();
        options.AddAnalyzerConfigOption(nameof(CodeGeneratorOptions.ProjectionType), ProjectionType.None.ToString());

        var builder = new TestSourceBuilder(options);
        var sourceFile = builder.AddFile();
        sourceFile.AddClass(Accessibility.Public, "SourceClass").WithProperty<int>("Id").WithProperty<string>("Name");
        sourceFile.AddClass(Accessibility.Public, "TargetClass", attributes: "[MapFrom(typeof(SourceClass))]").WithProperty<int>("Id").WithProperty<string>("Name");

        var generatedFile = builder.AddFile(ExpectedFileName, autoGenerated: true);
        generatedFile.AddClass(SimpleExpectedExtensionClassThatMapsIdAndNameProperties(builder));

        return builder;
    }

    public static ITestSourceBuilder SimpleMappedClassInSameNamespaceAsSource(LanguageVersion version) =>
        SimpleMappedClassInSameNamespaceAsSource(TestSourceBuilderOptions.Create(version));

    public static ITestSourceBuilder SimpleMappedClassInSameNamespaceAsSourceWithInitProperty(LanguageVersion version = LanguageVersion.CSharp10)
    {
        var options = TestSourceBuilderOptions.Create(version, supportNullReferenceTypes: false);
        options.AddAnalyzerConfigOption(nameof(CodeGeneratorOptions.ProjectionType), ProjectionType.None.ToString());

        var builder = new TestSourceBuilder(options);
        var sourceFile = builder.AddFile();
        sourceFile.AddClass(Accessibility.Public, "SourceClass").WithProperty<int>("Id").WithProperty<string>("Name");
        sourceFile.AddClass(Accessibility.Public, "TargetClass", attributes: "[MapFrom(typeof(SourceClass))]")
            .WithProperty<int>("Id")
            .WithProperty<string>("Name", propertyType: PropertyType.InitProperty | PropertyType.AutoProperty);

        var generatedFile = builder.AddFile(ExpectedFileName, autoGenerated: true);
        generatedFile.AddClass(SimpleExpectedExtensionClassThatMapsIdAndNameProperties(builder));

        return builder;
    }

    public static ITestSourceBuilder BuildEmployeeManagerModels(
        LanguageVersion version = LanguageVersion.CSharp10,
        ReferenceHandling referenceHandling = ReferenceHandling.Disabled) => BuildEmployeeManagerModels(TestSourceBuilderOptions.Create(version), referenceHandling);

    public static ITestSourceBuilder BuildEmployeeManagerModels(TestSourceBuilderOptions options, ReferenceHandling referenceHandling = ReferenceHandling.Disabled)
    {
        var globalUsings = new[] { "System.Collections.Generic" };
        var builder = new TestSourceBuilder(options);
        var employeeFile = builder.AddFile("Employee", usings: globalUsings);

        employeeFile.AddClass("""
                              public class Employee
                              {
                                  private Manager _manager;
                              
                                  public int Id { get; set; }
                              
                                  public string EmployeeCode { get; set; }
                              
                                  public Manager Manager
                                  {
                                      get => _manager;
                                      set
                                      {
                                          if (value == null)
                                          {
                                              _manager.Employees.Remove(this);
                                          }
                                          else
                                          {
                                              value.Employees.Add(this);
                                          }
                              
                                          _manager = value;
                                      }
                                  }
                              }
                              """);

        var managerFile = builder.AddFile("Manager", usings: globalUsings);
        managerFile.AddClass("""
                             public class Manager : Employee
                             {
                                 public int Level { get; set; }
                             
                                 public List<Employee> Employees { get; set; } = new();
                             }
                             """);

        var employeeViewModelFile = builder.AddFile("EmployeeViewModel");
        employeeViewModelFile.AddClass($$"""
                                         [MapFrom(typeof(Employee), ReferenceHandling = MapTo.Configuration.ReferenceHandling.{{referenceHandling}})]
                                         public partial class EmployeeViewModel
                                         {
                                             public int Id { get; init; }
                                         
                                             public string EmployeeCode { get; set; }
                                         
                                             public ManagerViewModel Manager { get; set; }
                                         }
                                         """);

        var managerViewModelFile = builder.AddFile("ManagerViewModel", usings: globalUsings);
        managerViewModelFile.AddClass($$"""
                                        [MapFrom(typeof(Manager), ReferenceHandling = MapTo.Configuration.ReferenceHandling.{{referenceHandling}})]
                                        public partial class ManagerViewModel : EmployeeViewModel
                                        {
                                            public ManagerViewModel(int id) => Id = id;
                                        
                                            public int Level { get; init; }
                                        
                                            public List<EmployeeViewModel> Employees { get; set;  } = new();
                                        }
                                        """);

        return builder;
    }

    public static ITestSourceBuilder BuildSpotifyModels(TestSourceBuilderOptions? options = null) => new TestSourceBuilder(options ?? TestSourceBuilderOptions.Create())
        .AddExternalFile(Path.Combine(TestDataRelativeFolder, "SpotifyAlbum.cs"))
        .AddExternalFile(Path.Combine(TestDataRelativeFolder, "SpotifyAlbumDto.cs"));

    public static ITestSourceBuilder BuildAlbumAndArtistModels(TestSourceBuilderOptions? options = null)
    {
        var builder = new TestSourceBuilder(options ?? TestSourceBuilderOptions.Create());
        var sourceFile = builder.AddFile("Models");
        sourceFile.AddClass(
            """
            public class ExternalUrls
            {
                public string Url { get; set; }
            }
            """);

        sourceFile.AddClass(
            """
            public class Artist
            {
                public ExternalUrls ExternalUrls { get; set; }
            
                public int Id { get; set; }
            
                public string Name { get; set; } = string.Empty;
            }
            """);

        sourceFile.AddClass(
            """
            public class Album
            {
                public string Name { get; set; } = string.Empty;
            
                public Artist[] Artists { get; set; }
            }
            """);

        var viewModels = builder.AddFile("ViewModels");
        viewModels.AddClass(
            """
            [MapFrom(typeof(ExternalUrls))]
            public partial class ExternalUrlViewModel
            {
                public string Url { get; set; }
            }
            """);

        viewModels.AddClass(
            """
            [MapFrom(typeof(Artist))]
            public partial class ArtistViewModel
            {
                public ExternalUrlViewModel ExternalUrls { get; set; }
            
                public int Id { get; set; }
            
                public string Name { get; set; } = string.Empty;
            }
            """);

        viewModels.AddClass(
            """
            [MapFrom(typeof(Album))]
            public partial class AlbumViewModel
            {
                public string Name { get; set; } = string.Empty;
            
                public ArtistViewModel[] Artists { get; set; }
            }
            """);

        return builder;
    }

    public static ITestSourceBuilder ProductOrderAndOrderLineItem(TestSourceBuilderOptions? options = null)
    {
        var builder = new TestSourceBuilder(options);
        var sourceFile = builder.AddFile(supportNullableReferenceTypes: true, usings: new[] { "System.Collections.Generic", "System.Linq" });
        sourceFile.AddClass(body:
            """
            public class Order
            {
                private readonly IList<OrderLineItem> _orderLineItems = new List<OrderLineItem>();
            
                public Customer? Customer { get; set; }
            
                public OrderLineItem[] GetOrderLineItems()
                {
                    return _orderLineItems.ToArray();
                }
            
                public void AddOrderLineItem(Product product, int quantity)
                {
                    _orderLineItems.Add(new OrderLineItem(product, quantity));
                }
            
                public decimal GetTotal()
                {
                    return _orderLineItems.Sum(li => li.GetTotal());
                }
            }
            """);

        sourceFile.AddClass(body:
            """
            public class Product
            {
                public decimal Price { get; set; }
                public string Name { get; set; } = null!;
            }
            """);

        sourceFile.AddClass(body:
            """
            public class OrderLineItem
            {
                public OrderLineItem(Product product, int quantity)
                {
                    Product = product;
                    Quantity = quantity;
                }
            
                public Product Product { get; private set; }
                public int Quantity { get; private set;}
            
                public decimal GetTotal()
                {
                    return Quantity*Product.Price;
                }
            }
            """);

        sourceFile.AddClass(body:
            """
            public class Customer
            {
                public string Name { get; set; } = null!;
            }
            """);

        return builder;
    }

    public static ITestSourceBuilder SimpleClassWithTwoEnumProperties(
        TestSourceBuilderOptions? options = null,
        EnumMappingStrategy? enumMappingStrategy = EnumMappingStrategy.ByValue,
        bool lowercaseTargetEnum = false,
        object? fallbackValue = null)
    {
        var builder = new TestSourceBuilder(options);
        var sourceFile = builder.AddFile();
        var mapFromBuilder = new StringBuilder();
        mapFromBuilder.Append("[MapFrom(typeof(SourceClass)");
        if (enumMappingStrategy is not null)
        {
            mapFromBuilder.Append($", EnumMappingStrategy = EnumMappingStrategy.{enumMappingStrategy}");
        }

        if (fallbackValue is not null)
        {
            mapFromBuilder.Append($", EnumMappingFallbackValue = {fallbackValue}");
        }

        mapFromBuilder.Append(")]");

        sourceFile.WithBody(
            $$"""
              public enum SourceEnum
              {
                  Value1,
                  Value2
              }

              public class SourceClass
              {
                  public SourceEnum Prop1 { get; set; }
                  public SourceEnum Prop2 { get; set; }
              }

              public enum TargetEnum
              {
                  Value1,
                  {{(lowercaseTargetEnum ? "value2" : "Value2")}}
              }

              {{(enumMappingStrategy is null or EnumMappingStrategy.ByValue ? "[MapFrom(typeof(SourceClass))]" : mapFromBuilder.ToString())}}
              public class TargetClass
              {
                  public TargetEnum Prop1 { get; set; }
                  public TargetEnum Prop2 { get; set; }
              }
              """);

        return builder;
    }

    public static ITestSourceBuilder EnumWithMapFromAttribute(EnumMappingStrategy enumMappingStrategy, TestSourceBuilderOptions? options = null)
    {
        var builder = new TestSourceBuilder(options);
        var sourceFile = builder.AddFile();

        sourceFile.WithBody(
            $$"""
              public enum SourceEnum
              {
                  Value1,
                  Value2
              }

              public class SourceClass
              {
                  public SourceEnum Prop1 { get; set; }
                  public SourceEnum Prop2 { get; set; }
              }

              [MapFrom(typeof(SourceEnum), EnumMappingStrategy = EnumMappingStrategy.{{enumMappingStrategy}})]
              public enum TargetEnum
              {
                  Value1,
                  Value2
              }

              [MapFrom(typeof(SourceClass))]
              public class TargetClass
              {
                  public TargetEnum Prop1 { get; set; }
                  public TargetEnum Prop2 { get; set; }
              }
              """);

        return builder;
    }

    private static string SimpleExpectedExtensionClassThatMapsIdAndNameProperties(ITestSourceBuilder builder) => builder.Options.SupportNullReferenceTypes
        ? $$"""
            {{GeneratedCodeAttribute}}
            public static class SourceClassMapToExtensions
            {
                [return: {{NotNullIfNotNull}}("sourceClass")]
                public static TargetClass? MapToTargetClass(this SourceClass? sourceClass)
                {
                    if (sourceClass is null)
                    {
                        return null;
                    }
            
                    return new TargetClass
                    {
                        Id = sourceClass.Id,
                        Name = sourceClass.Name
                    };
                }
            }
            """
        : $$"""
            {{GeneratedCodeAttribute}}
            public static class SourceClassMapToExtensions
            {
                [return: {{NotNullIfNotNull}}("sourceClass")]
                public static TargetClass MapToTargetClass([{{AllowNull}}] this SourceClass sourceClass)
                {
                    if (sourceClass is null)
                    {
                        return null;
                    }
            
                    return new TargetClass
                    {
                        Id = sourceClass.Id,
                        Name = sourceClass.Name
                    };
                }
            }
            """;
}