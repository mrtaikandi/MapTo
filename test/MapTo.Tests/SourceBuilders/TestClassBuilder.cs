using System.Diagnostics.CodeAnalysis;
using MapTo.Extensions;
using MapTo.Generators;

namespace MapTo.Tests.SourceBuilders;

internal record TestClassBuilder(
    string Name,
    Accessibility Accessibility,
    bool Partial,
    bool Static,
    bool AutoGenerated,
    IEnumerable<string> Attributes) : ITestClassBuilder
{
    private readonly List<ICodeBuilder> _members = new();

    /// <inheritdoc />
    public IReadOnlyCollection<ICodeBuilder> Members => _members;

    /// <inheritdoc />
    public void AddMember(ICodeBuilder member) => _members.Add(member);

    /// <inheritdoc />
    public void Build(CodeWriter writer, TestSourceBuilderOptions options)
    {
        if (AutoGenerated)
        {
            writer.WriteGeneratedCodeAttribute();
        }

        foreach (var attribute in Attributes)
        {
            writer.WriteLine(attribute);
        }

        writer
            .WriteLine($"{Accessibility.ToLowercaseString()}{(Partial ? " partial" : string.Empty)}{(Static ? " static" : string.Empty)} class {Name}")
            .WriteOpeningBracket(); // Class opening bracket

        Members.BuildAll(writer, options);

        writer.WriteClosingBracket(); // Class closing bracket
    }
}

internal static class ClassBuilderExtensions
{
    public static ITestClassBuilder AddClass(
        this ITestFileBuilder builder,
        Accessibility accessibility,
        string name,
        bool partial = false,
        bool isStatic = false,
        bool autoGenerated = false,
        [StringSyntax("csharp")] params string[] attributes) =>
        AddClass(builder, new TestClassBuilder(name, accessibility, partial, isStatic, autoGenerated, attributes));

    public static ITestClassBuilder AddClass(this ITestFileBuilder builder, TestClassBuilder classBuilder)
    {
        builder.AddMember(classBuilder);
        return classBuilder;
    }

    public static ITestFileBuilder AddEmptyClass(
        this ITestFileBuilder builder,
        string name,
        Accessibility accessibility = Accessibility.Public,
        bool partial = false,
        bool isStatic = false,
        bool autoGenerated = false,
        [StringSyntax("csharp")] params string[] attributes) =>
        AddEmptyClass(builder, new TestClassBuilder(name, accessibility, partial, isStatic, autoGenerated, attributes));

    public static ITestFileBuilder AddEmptyClass(this ITestFileBuilder builder, TestClassBuilder classBuilder)
    {
        builder.AddMember(classBuilder);
        return builder;
    }

    public static ITestClassBuilder WithConstructor(this ITestClassBuilder builder, [StringSyntax("csharp")] string constructor)
    {
        builder.AddMember(new SimpleCodeBuilder(1, (writer, _) => writer.WriteLines(constructor.Split(writer.NewLine))));
        return builder;
    }

    public static ITestClassBuilder WithBody(this ITestClassBuilder builder, [StringSyntax("csharp")] string body)
    {
        builder.AddMember(new SimpleCodeBuilder(1, (writer, _) => writer.WriteLines(body.Split(writer.NewLine))));
        return builder;
    }
}