using System.Diagnostics.CodeAnalysis;
using MapTo.Generators;

namespace MapTo.Tests.SourceBuilders;

internal record TestFileBuilder(string Name, string Namespace, IEnumerable<string> Usings, bool AutoGenerated, bool SupportNullableReferenceTypes) : ITestFileBuilder
{
    internal const string MapToTestsNamespace = "MapTo.Tests";
    private readonly List<ICodeBuilder> _members = new();

    /// <inheritdoc />
    public IReadOnlyCollection<ICodeBuilder> Members => _members;

    public void AddMember(ICodeBuilder member) => _members.Add(member);

    public void Build(CodeWriter writer, TestSourceBuilderOptions options)
    {
        writer
            .WriteAutoGeneratedHeaderIf(AutoGenerated)
            .WriteNullableContextOptionIf(SupportNullableReferenceTypes || (AutoGenerated && options.SupportNullReferenceTypes))
            .WriteSuppressFileScopeCompilerWarning("CS1591", "Missing XML comment for publicly visible type or member")
            .WriteLine()
            .WriteUsings(Usings);

        if (!string.IsNullOrWhiteSpace(Namespace))
        {
            if (options.FileScopedNamespace)
            {
                writer.WriteLine($"namespace {Namespace};");
                writer.WriteLine();
            }
            else
            {
                writer.WriteLine($"namespace {Namespace}");
                writer.WriteOpeningBracket();
            }
        }

        Members.BuildAll(writer, options);

        writer.WriteClosingBracketIf(!options.FileScopedNamespace && !string.IsNullOrWhiteSpace(Namespace));
    }
}

internal static class FileBuilderExtensions
{
    public static ITestFileBuilder AddFile(
        this ITestSourceBuilder builder,
        string fileName = "",
        string ns = TestFileBuilder.MapToTestsNamespace,
        bool autoGenerated = false,
        bool supportNullableReferenceTypes = false,
        IEnumerable<string>? usings = null) =>
        AddFile(builder, new TestFileBuilder(fileName, ns, usings ?? Enumerable.Empty<string>(), autoGenerated, supportNullableReferenceTypes));

    public static ITestFileBuilder AddFile(this ITestSourceBuilder builder, TestFileBuilder fileBuilder)
    {
        var sourceBuilder = (TestSourceBuilder)builder;
        if (string.IsNullOrWhiteSpace(fileBuilder.Name))
        {
            fileBuilder = fileBuilder with { Name = $"TestFile{sourceBuilder.Count + 1}" };
        }

        sourceBuilder.AddFile(fileBuilder);

        return fileBuilder;
    }

    public static ITestFileBuilder WithBody(this ITestFileBuilder builder, [StringSyntax("csharp")] string body)
    {
        builder.AddMember(new SimpleCodeBuilder(1, (writer, _) => writer.WriteLines(body.Split(writer.NewLine))));
        return builder;
    }
}