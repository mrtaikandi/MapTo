using MapTo.Configuration;

namespace MapTo.Tests.SourceBuilders;

internal static class ScenarioBuilder
{
    internal static readonly string GeneratedCodeAttribute =
        $$"""[global::System.CodeDom.Compiler.GeneratedCodeAttribute("MapTo", "{{typeof(MapToGenerator).Assembly.GetName().Version}}")]""";

    private const string AllowNull = "global::System.Diagnostics.CodeAnalysis.AllowNull";
    private const string ExpectedFileName = "ExpectedGeneratedFile";
    private const string NotNullIfNotNull = "global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull";

    public static string GetExpectedFileContent(this ITestSourceBuilder builder) =>
        builder.GetGeneratedFile().Source;

    public static TestSource GetGeneratedFile(this ITestSourceBuilder builder) =>
        builder.Sources.GetSource(ExpectedFileName);

    public static ITestSourceBuilder SimpleMappedClassInDifferentNamespaceAsSource(TestSourceBuilderOptions? options = null)
    {
        var builder = new TestSourceBuilder(options ?? TestSourceBuilderOptions.Create());

        var sourceFile1 = builder.AddFile(ns: "ExternalLib", usings: new[] { "MapTo" });
        sourceFile1.AddClass(AccessModifier.Public, "SourceClass").WithProperty<int>("Id").WithProperty<string>("Name");

        var sourceFile2 = builder.AddFile(ns: "ExternalLibMap", usings: new[] { "MapTo", "ExternalLib" });
        sourceFile2.AddClass(AccessModifier.Public, "TargetClass", attributes: "[MapFrom(typeof(SourceClass))]")
            .WithProperty<int>("Id")
            .WithProperty<string>("Name");

        return builder;
    }

    public static ITestSourceBuilder SimpleMappedClassInSameNamespaceAsSource(TestSourceBuilderOptions? options = null)
    {
        var builder = new TestSourceBuilder(options ?? TestSourceBuilderOptions.Create());
        var sourceFile = builder.AddFile();
        sourceFile.AddClass(AccessModifier.Public, "SourceClass").WithProperty<int>("Id").WithProperty<string>("Name");
        sourceFile.AddClass(AccessModifier.Public, "TargetClass", attributes: "[MapFrom(typeof(SourceClass))]").WithProperty<int>("Id").WithProperty<string>("Name");

        var generatedFile = builder.AddFile(ExpectedFileName, autoGenerated: true);
        generatedFile.AddClass(SimpleExpectedExtensionClassThatMapsIdAndNameProperties(builder));

        return builder;
    }

    public static ITestSourceBuilder SimpleMappedClassInSameNamespaceAsSource(LanguageVersion version) =>
        SimpleMappedClassInSameNamespaceAsSource(TestSourceBuilderOptions.Create(version));

    public static ITestSourceBuilder SimpleMappedClassInSameNamespaceAsSourceWithInitProperty(LanguageVersion version = LanguageVersion.CSharp10)
    {
        var builder = new TestSourceBuilder(TestSourceBuilderOptions.Create(version));
        var sourceFile = builder.AddFile();
        sourceFile.AddClass(AccessModifier.Public, "SourceClass").WithProperty<int>("Id").WithProperty<string>("Name");
        sourceFile.AddClass(AccessModifier.Public, "TargetClass", attributes: "[MapFrom(typeof(SourceClass))]")
            .WithProperty<int>("Id")
            .WithProperty<string>("Name", propertyType: PropertyType.InitProperty | PropertyType.AutoProperty);

        var generatedFile = builder.AddFile(ExpectedFileName, autoGenerated: true);
        generatedFile.AddClass(SimpleExpectedExtensionClassThatMapsIdAndNameProperties(builder));

        return builder;
    }

    private static string SimpleExpectedExtensionClassThatMapsIdAndNameProperties(ITestSourceBuilder builder) => builder.Options.SupportNullReferenceTypes
        ? $$"""
            {{GeneratedCodeAttribute}}
            public static class SourceClassMapToExtensions
            {
                [return: {{NotNullIfNotNull}}("sourceClass")]
                public static TargetClass? MapToTargetClass(this SourceClass? sourceClass)
                {
                    if (ReferenceEquals(sourceClass, null))
                    {
                        return null;
                    }

                    return new TargetClass
                    {
                        Id = sourceClass.Id,
                        Name = sourceClass.Name
                    };
                }
            }
            """
        : $$"""
            {{GeneratedCodeAttribute}}
            public static class SourceClassMapToExtensions
            {
                [return: {{NotNullIfNotNull}}("sourceClass")]
                public static TargetClass MapToTargetClass([{{AllowNull}}] this SourceClass sourceClass)
                {
                    if (ReferenceEquals(sourceClass, null))
                    {
                        return null;
                    }

                    return new TargetClass
                    {
                        Id = sourceClass.Id,
                        Name = sourceClass.Name
                    };
                }
            }
            """;
}