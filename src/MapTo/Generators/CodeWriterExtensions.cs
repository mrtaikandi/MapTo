using MapTo.Configuration;
using MapTo.Extensions;
using MapTo.Mappings;

namespace MapTo.Generators;

internal static class CodeWriterExtensions
{
    public static CodeWriter WriteAllowNullAttribute(this CodeWriter writer) =>
        writer.Write("[global::System.Diagnostics.CodeAnalysis.AllowNull] ");

    public static CodeWriter WriteAllowNullAttributeIf(this CodeWriter writer, bool condition) =>
        condition ? writer.WriteAllowNullAttribute() : writer;

    public static CodeWriter WriteAutoGeneratedHeader(this CodeWriter writer) =>
        writer.WriteLine("// <auto-generated />");

    public static CodeWriter WriteAutoGeneratedHeaderIf(this CodeWriter writer, bool condition) =>
        condition ? writer.WriteAutoGeneratedHeader() : writer;

    public static CodeWriter WriteGeneratedCodeAttribute(this CodeWriter writer) =>
        writer.WriteLine($@"[global::System.CodeDom.Compiler.GeneratedCodeAttribute(""{ThisAssembly.AssemblyName}"", ""{ThisAssembly.AssemblyFileVersion}"")]");

    public static CodeWriter WriteNullableContextOptionIf(this CodeWriter writer, bool enabled) =>
        writer.WriteLineIf(enabled, "#nullable enable").WriteLine();

    public static CodeWriter WriteReturnNotNullIfNotNullAttribute(this CodeWriter writer, string parameterName) =>
        writer.WriteLine($@"[return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(""{parameterName}"")]");

    public static CodeWriter WriteReturnNotNullIfNotNullAttributeIfRequired(this CodeWriter writer, string parameterName, CompilerOptions options) =>
        options.NullableStaticAnalysis || options.NullableReferenceTypes ? writer.WriteReturnNotNullIfNotNullAttribute(parameterName) : writer;

    public static CodeWriter WriteReturnNotNullIfNotNullAttributeIfRequired(this CodeWriter writer, TargetMapping mapping, CompilerOptions options) =>
        WriteReturnNotNullIfNotNullAttributeIfRequired(writer, mapping.Source.Name.ToParameterNameCasing(), options);

    public static CodeWriter WriteThrowNotImplementedException(this CodeWriter writer) =>
        writer.WriteLine("throw new System.NotImplementedException();");

    public static CodeWriter WriteUsing(this CodeWriter writer, string u) =>
        writer.WriteLine($"using {u};");

    public static CodeWriter WriteUsings(this CodeWriter writer, IEnumerable<string>? usings)
    {
        if (usings is null)
        {
            return writer;
        }

        var hasUsings = false;
        foreach (var u in usings.OrderBy(s => s))
        {
            writer.WriteUsing(u);
            hasUsings = true;
        }

        return writer.WriteLineIf(hasUsings);
    }

    public static CodeWriter WriteLineComment(this CodeWriter writer, string comment) =>
        writer.WriteLine($"// {comment}");
}