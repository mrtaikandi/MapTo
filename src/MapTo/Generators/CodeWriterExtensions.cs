using MapTo.Extensions;
using MapTo.Mappings;

namespace MapTo.Generators;

internal static class CodeWriterExtensions
{
    public static CodeWriter Wrap(this CodeWriter src, CodeWriter writer) => writer;

    public static CodeWriter WriteAllowNullAttribute(this CodeWriter writer) =>
        writer.Write("[global::System.Diagnostics.CodeAnalysis.AllowNull] ");

    public static CodeWriter WriteAllowNullAttributeIf(this CodeWriter writer, bool condition) =>
        condition ? writer.WriteAllowNullAttribute() : writer;

    public static CodeWriter WriteAutoGeneratedHeader(this CodeWriter writer) =>
        writer.WriteLine("// <auto-generated />");

    public static CodeWriter WriteAutoGeneratedHeaderIf(this CodeWriter writer, bool condition) =>
        condition ? writer.WriteAutoGeneratedHeader() : writer;

    public static CodeWriter WriteGeneratedCodeAttribute(this CodeWriter writer) =>
        writer.WriteLine($@"[global::System.CodeDom.Compiler.GeneratedCodeAttribute(""{ThisAssembly.AssemblyName}"", ""{ThisAssembly.AssemblyFileVersion}"")]");

    public static CodeWriter WriteIsNotNullCheck(this CodeWriter writer, string parameterName) => writer.LanguageVersion switch
    {
        < LanguageVersion.CSharp7 => writer.Write($"!ReferenceEquals({parameterName}, null)"),
        < LanguageVersion.CSharp9 => writer.Write($"!({parameterName} is not null)"),
        _ => writer.Write($"{parameterName} is not null")
    };

    public static CodeWriter WriteIsNullCheck(this CodeWriter writer, string parameterName) =>
        writer.Write(writer.LanguageVersion >= LanguageVersion.CSharp7 ? $"{parameterName} is null" : $"ReferenceEquals({parameterName}, null)");

    public static CodeWriter WriteLineComment(this CodeWriter writer, string comment) =>
        writer.WriteLine($"// {comment}");

    public static CodeWriter WriteNullableContextOptionIf(this CodeWriter writer, bool enabled) =>
        writer.WriteLineIf(enabled, "#nullable enable");

    public static CodeWriter WriteSuppressFileScopeCompilerWarning(this CodeWriter writer, string id, string? comment = null) =>
        writer.Write($"#pragma warning disable {id}").WriteLineIf(comment is not null, $" // {comment}");

    public static CodeWriter WriteSuppressFileScopeCompilerWarningIf(this CodeWriter writer, bool condition, string id, string? comment = null) =>
        condition ? writer.WriteSuppressFileScopeCompilerWarning(id, comment) : writer;

    public static CodeWriter WriteReturnNotNullIfNotNullAttribute(this CodeWriter writer, string parameterName) =>
        writer.WriteLine($"""[return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull("{parameterName}")]""");

    public static CodeWriter WriteReturnNotNullIfNotNullAttributeIf(this CodeWriter writer, bool condition, string parameterName) =>
        condition ? writer.WriteReturnNotNullIfNotNullAttribute(parameterName) : writer;

    public static CodeWriter WriteReturnNotNullIfNotNullAttributeIfRequired(this CodeWriter writer, string parameterName, CompilerOptions options) =>
        options.NullableStaticAnalysis || options.NullableReferenceTypes ? writer.WriteReturnNotNullIfNotNullAttribute(parameterName) : writer;

    public static CodeWriter WriteReturnNotNullIfNotNullAttributeIfRequired(this CodeWriter writer, TargetMapping mapping, CompilerOptions options, string? parameterName = null) =>
        WriteReturnNotNullIfNotNullAttributeIfRequired(writer, parameterName ?? mapping.Source.Name.ToParameterNameCasing(), options);

    public static CodeWriter WriteTernaryArgumentNullCheck(this CodeWriter writer, string parameterName, string trueValue) =>
        writer.WriteIsNullCheck(parameterName).Write(" ? ").WriteThrowArgumentNullException(parameterName).Write(" : ").Write(trueValue);

    public static CodeWriter WriteTernaryArgumentNullCheckIf(this CodeWriter writer, bool condition, string parameterName, string trueValue) =>
        condition ? writer.WriteTernaryArgumentNullCheck(parameterName, trueValue) : writer;

    public static CodeWriter WriteTernaryIsNotNullCheck(this CodeWriter writer, string parameterName, string trueValue, string falseValue) =>
        writer.WriteIsNotNullCheck(parameterName).Write($" ? {trueValue} : {falseValue}");

    public static CodeWriter WriteTernaryIsNullCheck(this CodeWriter writer, string parameterName, string trueValue, string falseValue) =>
        writer.WriteIsNullCheck(parameterName).Write(" ? ").Write(trueValue).Write(" : ").Write(falseValue);

    public static CodeWriter WriteThrowArgumentNullException(this CodeWriter writer, string parameterName) =>
        writer.Write($"throw new global::{KnownTypes.ArgumentNullException}(nameof({parameterName}))");

    public static CodeWriter WriteThrowArgumentOutOfRangeException(this CodeWriter writer, string source, string message) =>
        WriteThrowArgumentOutOfRangeException(writer, source, source, message);

    public static CodeWriter WriteThrowArgumentOutOfRangeException(this CodeWriter writer, string parameterName, string source, string message) =>
        writer.Write($"throw new global::{KnownTypes.ArgumentOutOfRangeException}(\"{parameterName}\", {source}, {message})");

    public static CodeWriter WriteThrowNotImplementedException(this CodeWriter writer) =>
        writer.WriteLine("throw new System.NotImplementedException();");

    public static CodeWriter WriteThrowInvalidOperationException(this CodeWriter writer, string message) =>
        writer.WriteLine($"throw new global::{KnownTypes.InvalidOperationException}(\"{message}\");");

    public static CodeWriter WriteUsing(this CodeWriter writer, string u) =>
        writer.WriteLine($"using {u};");

    public static CodeWriter WriteUsings(this CodeWriter writer, IEnumerable<string>? usings)
    {
        if (usings is null)
        {
            return writer;
        }

        var hasUsings = false;
        foreach (var u in usings.OrderBy(s => s))
        {
            writer.WriteUsing(u);
            hasUsings = true;
        }

        return writer.WriteLineIf(hasUsings);
    }
}