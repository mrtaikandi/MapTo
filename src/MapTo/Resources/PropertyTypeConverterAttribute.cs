// <auto-generated />

#if NETSTANDARD2_1_OR_GREATER
#nullable enable
#endif

namespace MapTo
{
    using System;

    /// <summary>
    /// Specifies what type to use as a converter for the property this attribute is bound to.
    /// </summary>
    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Parameter, AllowMultiple = false)]
    public sealed class PropertyTypeConverterAttribute : Attribute
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PropertyTypeConverterAttribute"/> class.
        /// </summary>
        /// <param name="methodName">The name of the static method to be used to convert the source type.</param>
        /// <exception cref="ArgumentNullException"><paramref name="methodName"/> is <c>null</c>.</exception>
        public PropertyTypeConverterAttribute(string methodName)
        {
            if (methodName == null)
            {
                throw new ArgumentNullException(nameof(methodName));
            }

            MethodName = methodName;
        }
        
        /// <summary>
        /// Gets the name of the method to be used to convert the source type.
        /// </summary>
        public string MethodName { get; }
        
        /// <summary>
        /// Gets or sets the list of parameters to pass to the <see cref=\"{MethodName}\"/> during the type conversion.
        /// </summary>
#if NETSTANDARD2_1_OR_GREATER
        public object[]? Parameters { get; set; }
#else
        public object[] Parameters { get; set; }
#endif
    }
}